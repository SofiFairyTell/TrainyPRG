#include <math.h>
#include <stdio.h>
#include <iostream>
#define _CRT_SECURE_NO_WARNINGS

/*
* 1.В блоке include выполняется подключение заголовочных файлов.
По сути это файлы где содержжаться функции. И чтобы их вызвать
нужно обязательно подсоединить этот файл к проекту
*/

//Сначала надо объявить какие функции будут
void printData();
void EnterDataReturnSum_С();
void EnterDataReturnSum_СPP();

double InputNumber();


int main()
{
	setlocale(LC_CTYPE, "");
	printData();
    EnterDataReturnSum_С();
    EnterDataReturnSum_СPP();
}


/* ТЗ1
* 1. Вывести ФИО и номер группы на CPP и на С
* 2. Ввести два числа с клавиатуры, проссумировать и отобразить результат
*/

//А теперь напишем, что внутри функций
void printData()
{
	std::cout << "ФИО 123 - этот текст вывел C++" << std::endl; //здесь используется пространство имен из iostream

	printf("ФИО 123- Этот текст вывел C\n ");//здесь используется функция из stdio.h

}

void EnterDataReturnSum_С()
{
	double num1, num2;

    /*Пользователи бывают разные. Запретим вводить что-то кроме чисел
    При этом используем цикл с предусловием. 
    То есть до тех пор пока не придет 1, то пользователю будет выведена ошибка о неправильном вводе числа*/
    
    while (1) {
        printf("Введите первое число:\n");
        if (scanf_s("%lf", &num1) == 1) {
            break; // Выход из цикла, если введено число
        }
        else {
            printf("Ошибка: Введите число.\n");
            while (getchar() != '\n'); // Очистка входного буфера
        }
    }

    while (1) {
        printf("Введите второе число: ");
        if (scanf_s("%lf", &num2) == 1) {
            break; // Выход из цикла, если введено число
        }
        else {
            printf("Ошибка: Введите число.\n");
            while (getchar() != '\n'); // Очистка входного буфера
        }
    }

    double sum = num1 + num2;

    printf("Сумма двух чисел: %lf\n", sum);

    /*
    Здесь можно улучшить следующее:
     - Добавить возможность выхода пользователю - наприер после N-й попытки - выбросить из программы
    */
}

void EnterDataReturnSum_СPP()
{
    double num1, num2;
    std::cout << "Используем C++" << std::endl;
    while (true) {
        std::cout << "Введите первое число: ";
        if (std::cin >> num1) {
            break; // Выход из цикла, если введено число
        }
        else {
            std::cerr << "Ошибка: Введите число." << std::endl;
            std::cin.clear(); // Сброс состояния потока
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очистка буфера ввода
        }
    }

    while (true) {
        std::cout << "Введите второе число: ";
        if (std::cin >> num2) {
            break; // Выход из цикла, если введено число
        }
        else {
            std::cerr << "Ошибка: Введите число." << std::endl;
            std::cin.clear(); // Сброс состояния потока
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очистка буфера ввода
        }
    }

    double sum = num1 + num2;

    std::cout << "Сумма чисел: " << sum << std::endl;

/*
* std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); говорит потоку ввода std::cin игнорировать 
все символы до символа новой строки ('\n') или до тех пор, пока не будет достигнуто максимальное количество символов, 
которое может обработать тип std::streamsize. Это полезно для очистки оставшихся символов во входном буфере после 
неудачной попытки чтения числа, чтобы избежать некорректного ввода при последующих попытках считывания.
*/
}


/* ТЗ2
* Найдем значение функции. Будем использовать цикл for
*/